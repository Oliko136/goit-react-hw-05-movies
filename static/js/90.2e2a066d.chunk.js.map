{"version":3,"file":"static/js/90.2e2a066d.chunk.js","mappings":"6MAEA,MAgBA,EAdiBA,IAAA,IAAC,KAAEC,GAAMD,EAAA,OACtBC,EAAKC,KAAIC,IAAA,IAAC,GAAEC,EAAE,aAAEC,EAAY,KAAEC,EAAI,UAAEC,GAAWJ,EAAA,OAC3CK,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OACIC,IAAKN,EAAY,mCAAAO,OAAsCP,GANpD,8EAOHQ,IAAKP,KACTI,EAAAA,EAAAA,KAAA,KAAAD,SAAIH,KACJE,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYF,OALVH,EAMJ,GAAC,E,aCLd,MAyCA,EAzCaU,KACT,MAAOb,EAAMc,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,OAE/B,QAAEG,IAAYC,EAAAA,EAAAA,MA0BpB,OAxBAC,EAAAA,EAAAA,YAAU,KACL,IAAKF,EACF,OAGJD,EAAU,WAEMI,WACZ,IACA,MAAM,KAAEC,SAAeC,EAAAA,EAAAA,GAAUL,GAC7BJ,EAAQQ,EAAKtB,MACbiB,EAAU,WAKd,CAHA,MAAOO,GACHC,QAAQC,IAAIF,EAAMG,SAClBV,EAAU,WACd,GAGJW,EAAS,GACV,CAACV,KAKAX,EAAAA,EAAAA,MAAAsB,EAAAA,SAAA,CAAArB,SAAA,CACgB,YAAXQ,IAAwBP,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,IACpB,aAAXd,IAAyBP,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACJ,QAAS,6CACrC,aAAXX,IAA0BhB,EAAKgC,SAAUvB,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACJ,QAAS,0CACrD,aAAXX,GAAyBhB,EAAKgC,OAAS,IAAKvB,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAACwB,EAAQ,CAACjC,KAAMA,QAClE,C,8CCzCX,MAUA,EAVqBD,IAAkB,IAAjB,QAAE4B,GAAS5B,EAC7B,OACIU,EAAAA,EAAAA,KAAA,KAAAD,SAAImB,GAAY,C,uDCFxB,MAaA,EAbeG,KAEPrB,EAAAA,EAAAA,KAACyB,EAAAA,GAAS,CACNC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,aAAa,qBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,Y,qECTjE,MAAMC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,QAAS,CAAC,cAAiB,gOAGhBC,EAAgBA,IACpBJ,EAASK,IAAI,sCACjBC,MAAKC,GAAYA,IACjBC,OAAMC,GAAO1B,QAAQD,MAAM2B,KAGnBC,EAAgBC,GACpBX,EAASK,IAAI,sBAADpC,OAAuB0C,EAAK,+CAC5CL,MAAKC,GAAYA,IACjBC,OAAMC,GAAO1B,QAAQD,MAAM2B,KAGnBG,EAAanD,GACjBuC,EAASK,IAAI,SAADpC,OAAUR,EAAE,oBAC5B6C,MAAKC,GAAYA,IACjBC,OAAMC,GAAO1B,QAAQD,MAAM2B,KAGnB5B,EAAapB,GACjBuC,EAASK,IAAI,SAADpC,OAAUR,EAAE,4BAC5B6C,MAAKC,GAAYA,IACjBC,OAAMC,GAAO1B,QAAQD,MAAM2B,KAGnBI,EAAgBpD,GACpBuC,EAASK,IAAI,SAADpC,OAAUR,EAAE,mCAC5B6C,MAAKC,GAAYA,IACjBC,OAAMC,GAAO1B,QAAQD,MAAM2B,I","sources":["components/Cast/CastCard.jsx","components/Cast/Cast.jsx","components/ErrorMessage/ErrorMessage.jsx","components/Loader/Loader.jsx","services/movie-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst CastCard = ({ cast }) =>\n    cast.map(({ id, profile_path, name, character }) =>\n        <li key={id}>\n            <img\n                src={profile_path ? `https://image.tmdb.org/t/p/w300/${profile_path}` : defaultImg}\n                alt={name} />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n        </li>);\n\nCastCard.propTypes = {\n    cast: PropTypes.array.isRequired\n}\n\nexport default CastCard;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Loader from \"components/Loader/Loader\";\nimport ErrorMessage from \"components/ErrorMessage/ErrorMessage\";\nimport CastCard from \"./CastCard\";\nimport { fetchCast } from \"services/movie-api\";\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const [status, setStatus] = useState(null);\n    \n    const { movieId } = useParams();\n\n    useEffect(() => {\n         if (!movieId) {\n            return\n        }\n\n        setStatus('pending');\n\n        const getCast = async () => {\n            try {\n            const { data } = await fetchCast(movieId);\n                setCast(data.cast);\n                setStatus('resolved');\n            }\n            catch (error) {\n                console.log(error.message);\n                setStatus('rejected');\n            }\n        }\n\n        getCast();\n    }, [movieId])\n\n\n\n    return (\n        <>\n            {status === 'pending' && <Loader />}\n            {status === 'rejected' && <ErrorMessage message={'An error occured, please try again later'} />}\n            {status === 'resolved' && !cast.length && <ErrorMessage message={'No cast list available for this movie'}/>}\n            {status === 'resolved' && cast.length > 0 && <ul><CastCard cast={cast} /></ul>}\n        </>\n        \n    )\n}\n\nexport default Cast;","import PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n    return (\n        <p>{message}</p>\n    )\n}\n\nErrorMessage.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default ErrorMessage;","import { ColorRing } from 'react-loader-spinner';\n\nconst Loader = () => {\n    return(\n        <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"color-ring-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"color-ring-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n        />)\n}\n\nexport default Loader;","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNWE5MzAyYWUzMmFjNmZhNzViYzA1MDhlNGM3NGMwYiIsInN1YiI6IjYzM2ZiNzc3YjRhNTQzMDA3ZGE0MzA3ZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9vzJQ3wYIlY6xqrP8aWnr_LR0dOLBnKjHBDyrh1KCV0'}\n});\n\nexport const fetchTrending = () => {\n  return instance.get(`/trending/movie/day?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchByTitle = (title) => {\n  return instance.get(`search/movie?query=${title}&include_adult=false&language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchById = (id) => {\n  return instance.get(`movie/${id}?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchCast = (id) => {\n  return instance.get(`movie/${id}/credits?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchReviews = (id) => {\n  return instance.get(`movie/${id}/reviews?language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\n\n\n\n  "],"names":["_ref","cast","map","_ref2","id","profile_path","name","character","_jsxs","children","_jsx","src","concat","alt","Cast","setCast","useState","status","setStatus","movieId","useParams","useEffect","async","data","fetchCast","error","console","log","message","getCast","_Fragment","Loader","ErrorMessage","length","CastCard","ColorRing","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","instance","axios","baseURL","headers","fetchTrending","get","then","response","catch","err","fetchByTitle","title","fetchById","fetchReviews"],"sourceRoot":""}