{"version":3,"file":"static/js/986.9fd6d4fc.chunk.js","mappings":"8JAEA,MAUA,EAVqBA,IAAkB,IAAjB,QAAEC,GAASD,EAC7B,OACIE,EAAAA,EAAAA,KAAA,KAAAC,SAAIF,GAAY,C,uDCFxB,MAaA,EAbeG,KAEPF,EAAAA,EAAAA,KAACG,EAAAA,GAAS,CACNC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,aAAa,qBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,Y,+FCTjE,MAWA,EAXoBZ,IAAA,IAAC,QAAEa,GAASb,EAAA,OAC5Ba,EAAQC,KAAIC,IAAA,IAAC,GAAEC,EAAE,OAAEC,EAAM,QAAEC,GAAQH,EAAA,OAC/BI,EAAAA,EAAAA,MAAA,MAAAhB,SAAA,EACIgB,EAAAA,EAAAA,MAAA,KAAAhB,SAAA,CAAG,WAASc,MACZf,EAAAA,EAAAA,KAAA,KAAAC,SAAIe,MAFCF,EAGJ,GAAC,E,aCAd,MAsCA,EAtCgBI,KACZ,MAAOP,EAASQ,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,OAE/B,QAAEG,IAAYC,EAAAA,EAAAA,MAwBpB,OAtBAC,EAAAA,EAAAA,YAAU,KACL,IAAKF,EACF,OAGJD,EAAU,WAESI,WACf,IACA,MAAM,KAAEC,SAAeC,EAAAA,EAAAA,IAAaL,GAChCJ,EAAWQ,EAAKE,SAChBP,EAAU,WAKd,CAHA,MAAOQ,GACHC,QAAQC,IAAIF,EAAM/B,SAClBuB,EAAU,WACd,GAGJW,EAAY,GACb,CAACV,KAGCN,EAAAA,EAAAA,MAAAiB,EAAAA,SAAA,CAAAjC,SAAA,CACe,YAAXoB,IAAwBrB,EAAAA,EAAAA,KAACE,EAAAA,EAAM,IACpB,aAAXmB,IAAyBrB,EAAAA,EAAAA,KAACmC,EAAAA,EAAY,CAACpC,QAAS,6CACrC,aAAXsB,IAA0BV,EAAQyB,SAAUpC,EAAAA,EAAAA,KAACmC,EAAAA,EAAY,CAACpC,QAAS,wCACxD,aAAXsB,GAAyBV,EAAQyB,OAAS,IAAKpC,EAAAA,EAAAA,KAAA,MAAAC,UAAKD,EAAAA,EAAAA,KAACqC,EAAW,CAAC1B,QAASA,QAC5E,C,qECvCX,MAAM2B,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,QAAS,CAAC,cAAiB,gOAGhBC,EAAgBA,IACpBJ,EAASK,IAAI,sCACjBC,MAAKC,GAAYA,IACjBC,OAAMC,GAAOhB,QAAQD,MAAMiB,KAGnBC,EAAgBC,GACpBX,EAASK,IAAI,sBAADO,OAAuBD,EAAK,+CAC5CL,MAAKC,GAAYA,IACjBC,OAAMC,GAAOhB,QAAQD,MAAMiB,KAGnBI,EAAarC,GACjBwB,EAASK,IAAI,SAADO,OAAUpC,EAAE,oBAC5B8B,MAAKC,GAAYA,IACjBC,OAAMC,GAAOhB,QAAQD,MAAMiB,KAGnBK,EAAatC,GACjBwB,EAASK,IAAI,SAADO,OAAUpC,EAAE,4BAC5B8B,MAAKC,GAAYA,IACjBC,OAAMC,GAAOhB,QAAQD,MAAMiB,KAGnBnB,EAAgBd,GACpBwB,EAASK,IAAI,SAADO,OAAUpC,EAAE,mCAC5B8B,MAAKC,GAAYA,IACjBC,OAAMC,GAAOhB,QAAQD,MAAMiB,I","sources":["components/ErrorMessage/ErrorMessage.jsx","components/Loader/Loader.jsx","components/Reviews/ReviewsCard.jsx","components/Reviews/Reviews.jsx","services/movie-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n    return (\n        <p>{message}</p>\n    )\n}\n\nErrorMessage.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default ErrorMessage;","import { ColorRing } from 'react-loader-spinner';\n\nconst Loader = () => {\n    return(\n        <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"color-ring-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"color-ring-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n        />)\n}\n\nexport default Loader;","import PropTypes from 'prop-types';\n\nconst ReviewsCard = ({ reviews }) =>\n    reviews.map(({ id, author, content}) =>\n        <li key={id}>\n            <p>Author: {author}</p>\n            <p>{content}</p>\n        </li>);\n\nReviewsCard.propTypes = {\n    reviews: PropTypes.array.isRequired\n}\n\nexport default ReviewsCard;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Loader from \"components/Loader/Loader\";\nimport ErrorMessage from \"components/ErrorMessage/ErrorMessage\";\nimport ReviewsCard from \"./ReviewsCard\";\nimport { fetchReviews } from \"services/movie-api\";\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const [status, setStatus] = useState(null);\n    \n    const { movieId } = useParams();\n\n    useEffect(() => {\n         if (!movieId) {\n            return\n        }\n\n        setStatus('pending');\n\n        const getReviews = async () => {\n            try {\n            const { data } = await fetchReviews(movieId);\n                setReviews(data.results);\n                setStatus('resolved');\n            }\n            catch (error) {\n                console.log(error.message);\n                setStatus('rejected');\n            }\n        }\n\n        getReviews();\n    }, [movieId])\n\n    return (\n         <>\n            {status === 'pending' && <Loader />}\n            {status === 'rejected' && <ErrorMessage message={'An error occured, please try again later'}/>}\n            {status === 'resolved' && !reviews.length && <ErrorMessage message={'No reviews available for this movie'}/>}\n            {status === 'resolved' && reviews.length > 0 && <ul>{<ReviewsCard reviews={reviews}/>}</ul>}\n        </>\n    )\n}\n\nexport default Reviews;","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNWE5MzAyYWUzMmFjNmZhNzViYzA1MDhlNGM3NGMwYiIsInN1YiI6IjYzM2ZiNzc3YjRhNTQzMDA3ZGE0MzA3ZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9vzJQ3wYIlY6xqrP8aWnr_LR0dOLBnKjHBDyrh1KCV0'}\n});\n\nexport const fetchTrending = () => {\n  return instance.get(`/trending/movie/day?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchByTitle = (title) => {\n  return instance.get(`search/movie?query=${title}&include_adult=false&language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchById = (id) => {\n  return instance.get(`movie/${id}?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchCast = (id) => {\n  return instance.get(`movie/${id}/credits?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchReviews = (id) => {\n  return instance.get(`movie/${id}/reviews?language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\n\n\n\n  "],"names":["_ref","message","_jsx","children","Loader","ColorRing","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","reviews","map","_ref2","id","author","content","_jsxs","Reviews","setReviews","useState","status","setStatus","movieId","useParams","useEffect","async","data","fetchReviews","results","error","console","log","getReviews","_Fragment","ErrorMessage","length","ReviewsCard","instance","axios","baseURL","headers","fetchTrending","get","then","response","catch","err","fetchByTitle","title","concat","fetchById","fetchCast"],"sourceRoot":""}