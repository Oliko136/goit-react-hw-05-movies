{"version":3,"file":"static/js/854.039886af.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ErrorMessage/ErrorMessage.module.css?d773","components/ErrorMessage/ErrorMessage.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://react-homework-template/./src/components/MoviesSearch/MoviesSearch.module.css?9702","components/MoviesSearch/MoviesSearch.jsx","pages/Movies/Movies.jsx","services/movie-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ErrorMessage\":\"ErrorMessage_ErrorMessage__yaGRn\"};","import PropTypes from 'prop-types';\nimport styles from './ErrorMessage.module.css';\n\nconst ErrorMessage = ({ message }) => {\n    return (\n        <p className={styles.ErrorMessage}>{message}</p>\n    )\n}\n\nErrorMessage.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default ErrorMessage;","// extracted by mini-css-extract-plugin\nexport default {\"MoviesList\":\"MoviesList_MoviesList__jqSLr\",\"MovieLink\":\"MoviesList_MovieLink__diM+a\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from \"react-router-dom\";\nimport styles from './MoviesList.module.css';\n\nconst MoviesList = ({ movies }) => {\n    const location = useLocation();\n    \n    const elements = movies.map(({ id, title }) =>\n        <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }} className={styles.MovieLink}>{title}</Link>\n        </li>);\n    \n    return (\n        <ul className={styles.MoviesList}>\n            {elements}\n        </ul>\n    )\n}\n\nMoviesList.propTypes = {\n    movies: PropTypes.array.isRequired\n}\n\nexport default MoviesList;","// extracted by mini-css-extract-plugin\nexport default {\"Section\":\"Section_Section__cTDcW\"};","import PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ children }) => {\n    return (\n        <section className={styles.Section}>\n            {children}\n        </section>\n    )\n}\n\nSection.propTypes = {\n    children: PropTypes.node\n}\n\nexport default Section;","// extracted by mini-css-extract-plugin\nexport default {\"MoviesSearchForm\":\"MoviesSearch_MoviesSearchForm__FdBHH\",\"MoviesSearchInput\":\"MoviesSearch_MoviesSearchInput__VmPGY\",\"MoviesSearchButton\":\"MoviesSearch_MoviesSearchButton__SkAyb\",\"MoviesSearchButtonIcon\":\"MoviesSearch_MoviesSearchButtonIcon__GzRrf\"};","import PropTypes from 'prop-types';\nimport { useState } from \"react\";\nimport { FaSearch } from \"react-icons/fa\";\nimport styles from './MoviesSearch.module.css';\n\nconst MoviesSearch = ({ onSubmit }) => {\n    const [query, setQuery] = useState('');\n\n    const handleChange = ({ target }) => { setQuery(target.value.toLowerCase()) };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (query.trim() === '') {\n            alert('Please fill out this field');\n            return;\n        }\n\n        onSubmit(query);\n        setQuery('');\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={styles.MoviesSearchForm}>\n            <input\n                className={styles.MoviesSearchInput}\n                type=\"text\"\n                name=\"search\"\n                value={query}\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movies by title\"\n                onChange={handleChange} />\n            <button type=\"submit\" className={styles.MoviesSearchButton}>\n                <FaSearch className={styles.MoviesSearchButtonIcon} />\n            </button>\n        </form>\n    )\n}\n\nMoviesSearch.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default MoviesSearch;","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport Section from \"components/Section/Section\";\nimport Loader from \"components/Loader/Loader\";\nimport ErrorMessage from \"components/ErrorMessage/ErrorMessage\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\nimport MoviesSearch from \"components/MoviesSearch/MoviesSearch\";\nimport { fetchByTitle } from \"services/movie-api\";\n\nconst Movies = () => {\n    const [searchedMovies, setSearchedMovies] = useState([]);\n    const [status, setStatus] = useState(null);\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query');\n\n    useEffect(() => {\n        if (!query) {\n            return\n        }\n\n        setStatus('pending');\n\n        const getSearchedMovies = async () => {\n            try {\n                const { data } = await fetchByTitle(query);\n                setSearchedMovies(data.results);\n                setStatus('resolved');\n            }\n            catch (error) {\n                console.log(error.message);\n                setStatus('rejected');\n            }\n        }\n\n        getSearchedMovies();\n    }, [query])\n\n    const handleSearch = value => {\n        setSearchParams({ query: value });\n        setSearchedMovies([]);\n    }\n\n    return (\n        <Section>\n            <MoviesSearch onSubmit={handleSearch}/>\n            {status === 'pending' && <Loader />}\n            {status === 'rejected' && <ErrorMessage message={'An error occured, please try again later'}/>}\n            {status === 'resolved' && !searchedMovies.length && <ErrorMessage message={`Sorry, no results for ${query}. Please, enter a valid title.`}/>}\n            {status === 'resolved' && searchedMovies.length > 0 && <MoviesList movies={searchedMovies} />}\n        </Section>\n        \n    )\n}\n\nexport default Movies;","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNWE5MzAyYWUzMmFjNmZhNzViYzA1MDhlNGM3NGMwYiIsInN1YiI6IjYzM2ZiNzc3YjRhNTQzMDA3ZGE0MzA3ZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9vzJQ3wYIlY6xqrP8aWnr_LR0dOLBnKjHBDyrh1KCV0'}\n});\n\nexport const fetchTrending = () => {\n  return instance.get(`/trending/movie/day?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchByTitle = (title) => {\n  return instance.get(`search/movie?query=${title}&include_adult=false&language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchById = (id) => {\n  return instance.get(`movie/${id}?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchCast = (id) => {\n  return instance.get(`movie/${id}/credits?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchReviews = (id) => {\n  return instance.get(`movie/${id}/reviews?language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\n\n\n\n  "],"names":["_ref","message","_jsx","className","styles","children","movies","location","useLocation","elements","map","_ref2","id","title","Link","to","concat","state","from","onSubmit","query","setQuery","useState","_jsxs","e","preventDefault","trim","alert","type","name","value","autoComplete","autoFocus","placeholder","onChange","target","toLowerCase","FaSearch","Movies","searchedMovies","setSearchedMovies","status","setStatus","searchParams","setSearchParams","useSearchParams","get","useEffect","async","data","fetchByTitle","results","error","console","log","getSearchedMovies","Section","MoviesSearch","Loader","ErrorMessage","length","MoviesList","instance","axios","baseURL","headers","fetchTrending","then","response","catch","err","fetchById","fetchCast","fetchReviews"],"sourceRoot":""}