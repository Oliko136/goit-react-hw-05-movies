{"version":3,"file":"static/js/415.2b05e082.chunk.js","mappings":"8JAEA,MAUA,EAVqBA,IAAkB,IAAjB,QAAEC,GAASD,EAC7B,OACIE,EAAAA,EAAAA,KAAA,KAAAC,SAAIF,GAAY,C,uDCFxB,MAaA,EAbeG,KAEPF,EAAAA,EAAAA,KAACG,EAAAA,GAAS,CACNC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,aAAa,qBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,Y,+DCRjE,MAmBA,EAnBmBZ,IAAiB,IAAhB,OAAEa,GAAQb,EAC1B,MAAMc,GAAWC,EAAAA,EAAAA,MAEXC,EAAWH,EAAOI,KAAIC,IAAA,IAAC,GAAEC,EAAE,MAAEC,GAAOF,EAAA,OACtChB,EAAAA,EAAAA,KAAA,MAAAC,UACID,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaJ,GAAMK,MAAO,CAAEC,KAAMX,GAAWX,SAAEiB,KADlDD,EAEJ,IAET,OACIjB,EAAAA,EAAAA,KAAA,MAAAC,SACKa,GACA,C,wGCRb,MAiCA,EAjCaU,KACT,MAAOC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,KAC9CC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,MAoBrC,OAlBAG,EAAAA,EAAAA,YAAU,KACND,EAAU,WAEUE,WAChB,IACI,MAAM,KAAEC,SAAeC,EAAAA,EAAAA,MACvBP,EAAkBM,EAAKE,SACvBL,EAAU,WAKd,CAHA,MAAOM,GACHC,QAAQC,IAAIF,EAAMpC,SAClB8B,EAAU,WACd,GAGJS,EAAa,GACd,KAGCC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvC,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,mBACQ,YAAX2B,IAAwB5B,EAAAA,EAAAA,KAACE,EAAAA,EAAM,IACpB,aAAX0B,IAAyB5B,EAAAA,EAAAA,KAACyC,EAAAA,EAAY,CAAC1C,QAAS,6CACrC,aAAX6B,IAAyB5B,EAAAA,EAAAA,KAAC0C,EAAAA,EAAU,CAAC/B,OAAQc,MAE/C,C,qECjCX,MAAMkB,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,QAAS,CAAC,cAAiB,gOAGhBb,EAAgBA,IACpBU,EAASI,IAAI,sCACjBC,MAAKC,GAAYA,IACjBC,OAAMC,GAAOf,QAAQD,MAAMgB,KAGnBC,EAAgBlC,GACpByB,EAASI,IAAI,sBAAD1B,OAAuBH,EAAK,+CAC5C8B,MAAKC,GAAYA,IACjBC,OAAMC,GAAOf,QAAQD,MAAMgB,KAGnBE,EAAapC,GACjB0B,EAASI,IAAI,SAAD1B,OAAUJ,EAAE,oBAC5B+B,MAAKC,GAAYA,IACjBC,OAAMC,GAAOf,QAAQD,MAAMgB,KAGnBG,EAAarC,GACjB0B,EAASI,IAAI,SAAD1B,OAAUJ,EAAE,4BAC5B+B,MAAKC,GAAYA,IACjBC,OAAMC,GAAOf,QAAQD,MAAMgB,KAGnBI,EAAgBtC,GACpB0B,EAASI,IAAI,SAAD1B,OAAUJ,EAAE,mCAC5B+B,MAAKC,GAAYA,IACjBC,OAAMC,GAAOf,QAAQD,MAAMgB,I","sources":["components/ErrorMessage/ErrorMessage.jsx","components/Loader/Loader.jsx","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/movie-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n    return (\n        <p>{message}</p>\n    )\n}\n\nErrorMessage.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default ErrorMessage;","import { ColorRing } from 'react-loader-spinner';\n\nconst Loader = () => {\n    return(\n        <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"color-ring-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"color-ring-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n        />)\n}\n\nexport default Loader;","import PropTypes from 'prop-types';\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst MoviesList = ({ movies }) => {\n    const location = useLocation();\n    \n    const elements = movies.map(({ id, title }) =>\n        <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>{title}</Link>\n        </li>);\n    \n    return (\n        <ul>\n            {elements}\n        </ul>\n    )\n}\n\nMoviesList.propTypes = {\n    movies: PropTypes.array.isRequired\n}\n\nexport default MoviesList;","import { useState, useEffect } from \"react\";\nimport Loader from \"components/Loader/Loader\";\nimport ErrorMessage from \"components/ErrorMessage/ErrorMessage\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\nimport { fetchTrending } from \"services/movie-api\";\n\nconst Home = () => {\n    const [trendingMovies, setTrendingMovies] = useState([]);\n    const [status, setStatus] = useState(null);\n\n    useEffect(() => {\n        setStatus('pending');\n\n        const getTrending = async () => {\n            try {\n                const { data } = await fetchTrending();\n                setTrendingMovies(data.results);\n                setStatus('resolved');\n            }\n            catch (error) {\n                console.log(error.message);\n                setStatus('rejected');\n            }\n        }\n\n        getTrending();\n    }, [])\n\n    return (\n        <>\n            <h1>Trending today</h1>\n            {status === 'pending' && <Loader />}\n            {status === 'rejected' && <ErrorMessage message={'An error occured, please try again later'}/>}\n            {status === 'resolved' && <MoviesList movies={trendingMovies} />}\n            \n        </>\n    )\n}\n\nexport default Home;","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNWE5MzAyYWUzMmFjNmZhNzViYzA1MDhlNGM3NGMwYiIsInN1YiI6IjYzM2ZiNzc3YjRhNTQzMDA3ZGE0MzA3ZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9vzJQ3wYIlY6xqrP8aWnr_LR0dOLBnKjHBDyrh1KCV0'}\n});\n\nexport const fetchTrending = () => {\n  return instance.get(`/trending/movie/day?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchByTitle = (title) => {\n  return instance.get(`search/movie?query=${title}&include_adult=false&language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchById = (id) => {\n  return instance.get(`movie/${id}?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchCast = (id) => {\n  return instance.get(`movie/${id}/credits?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchReviews = (id) => {\n  return instance.get(`movie/${id}/reviews?language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\n\n\n\n  "],"names":["_ref","message","_jsx","children","Loader","ColorRing","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","movies","location","useLocation","elements","map","_ref2","id","title","Link","to","concat","state","from","Home","trendingMovies","setTrendingMovies","useState","status","setStatus","useEffect","async","data","fetchTrending","results","error","console","log","getTrending","_jsxs","_Fragment","ErrorMessage","MoviesList","instance","axios","baseURL","headers","get","then","response","catch","err","fetchByTitle","fetchById","fetchCast","fetchReviews"],"sourceRoot":""}