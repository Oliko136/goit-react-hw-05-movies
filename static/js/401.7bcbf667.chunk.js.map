{"version":3,"file":"static/js/401.7bcbf667.chunk.js","mappings":"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","sources":["components/ErrorMessage/ErrorMessage.jsx","components/Loader/Loader.jsx","components/MoviesList/MoviesList.jsx","components/MoviesSearch/MoviesSearch.jsx","pages/Movies.jsx","services/movie-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n    return (\n        <p>{message}</p>\n    )\n}\n\nErrorMessage.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default ErrorMessage;","import { ColorRing } from 'react-loader-spinner';\n\nconst Loader = () => {\n    return(\n        <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"color-ring-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"color-ring-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n        />)\n}\n\nexport default Loader;","import PropTypes from 'prop-types';\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst MoviesList = ({ movies }) => {\n    const location = useLocation();\n    \n    const elements = movies.map(({ id, title }) =>\n        <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>{title}</Link>\n        </li>);\n    \n    return (\n        <ul>\n            {elements}\n        </ul>\n    )\n}\n\nMoviesList.propTypes = {\n    movies: PropTypes.array.isRequired\n}\n\nexport default MoviesList;","import PropTypes from 'prop-types';\nimport { useState } from \"react\";\n\nconst MoviesSearch = ({ onSubmit }) => {\n    const [query, setQuery] = useState('');\n\n    const handleChange = ({ target }) => { setQuery(target.value.toLowerCase()) };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (query.trim() === '') {\n            alert('Please fill out this field');\n            return;\n        }\n\n        onSubmit(query);\n        setQuery('');\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                name=\"search\"\n                value={query}\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movies by title\"\n                onChange={handleChange} />\n            <button type=\"submit\">Search</button>\n        </form>\n    )\n}\n\nMoviesSearch.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default MoviesSearch;","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport Loader from \"components/Loader/Loader\";\nimport ErrorMessage from \"components/ErrorMessage/ErrorMessage\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\nimport MoviesSearch from \"components/MoviesSearch/MoviesSearch\";\nimport { fetchByTitle } from \"services/movie-api\";\n\nconst Movies = () => {\n    const [searchedMovies, setSearchedMovies] = useState([]);\n    const [status, setStatus] = useState(null);\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query');\n\n    useEffect(() => {\n        if (!query) {\n            return\n        }\n\n        setStatus('pending');\n\n        const getSearchedMovies = async () => {\n            try {\n                const { data } = await fetchByTitle(query);\n                setSearchedMovies(data.results);\n                setStatus('resolved');\n            }\n            catch (error) {\n                console.log(error.message);\n                setStatus('rejected');\n            }\n        }\n\n        getSearchedMovies();\n    }, [query])\n\n    const handleSearch = value => {\n        setSearchParams({ query: value });\n        setSearchedMovies([]);\n    }\n\n    return (\n        <>\n            <MoviesSearch onSubmit={handleSearch}/>\n            {status === 'pending' && <Loader />}\n            {status === 'rejected' && <ErrorMessage message={'An error occured, please try again later'}/>}\n            {status === 'resolved' && !searchedMovies.length && <ErrorMessage message={`Sorry, no results for ${query}. Please, enter a valid title.`}/>}\n            {status === 'resolved' && searchedMovies.length > 0 && <MoviesList movies={searchedMovies} />}\n        </>\n        \n    )\n}\n\nexport default Movies;","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNWE5MzAyYWUzMmFjNmZhNzViYzA1MDhlNGM3NGMwYiIsInN1YiI6IjYzM2ZiNzc3YjRhNTQzMDA3ZGE0MzA3ZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9vzJQ3wYIlY6xqrP8aWnr_LR0dOLBnKjHBDyrh1KCV0'}\n});\n\nexport const fetchTrending = () => {\n  return instance.get(`/trending/movie/day?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchByTitle = (title) => {\n  return instance.get(`search/movie?query=${title}&include_adult=false&language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchById = (id) => {\n  return instance.get(`movie/${id}?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchCast = (id) => {\n  return instance.get(`movie/${id}/credits?language=en-US`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\nexport const fetchReviews = (id) => {\n  return instance.get(`movie/${id}/reviews?language=en-US&page=1`)\n    .then(response => response)\n    .catch(err => console.error(err));\n}\n\n\n\n\n  "],"names":["_ref","message","_jsx","children","Loader","ColorRing","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","movies","location","useLocation","elements","map","_ref2","id","title","Link","to","concat","state","from","onSubmit","query","setQuery","useState","_jsxs","e","preventDefault","trim","alert","type","name","value","autoComplete","autoFocus","placeholder","onChange","target","toLowerCase","Movies","searchedMovies","setSearchedMovies","status","setStatus","searchParams","setSearchParams","useSearchParams","get","useEffect","async","data","fetchByTitle","results","error","console","log","getSearchedMovies","_Fragment","MoviesSearch","ErrorMessage","length","MoviesList","instance","axios","baseURL","headers","fetchTrending","then","response","catch","err","fetchById","fetchCast","fetchReviews"],"sourceRoot":""}